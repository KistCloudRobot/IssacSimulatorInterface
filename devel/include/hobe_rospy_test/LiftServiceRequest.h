// Generated by gencpp from file hobe_rospy_test/LiftServiceRequest.msg
// DO NOT EDIT!


#ifndef HOBE_ROSPY_TEST_MESSAGE_LIFTSERVICEREQUEST_H
#define HOBE_ROSPY_TEST_MESSAGE_LIFTSERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hobe_rospy_test
{
template <class ContainerAllocator>
struct LiftServiceRequest_
{
  typedef LiftServiceRequest_<ContainerAllocator> Type;

  LiftServiceRequest_()
    : robotName()
    , target_value(0.0)
    , order()  {
    }
  LiftServiceRequest_(const ContainerAllocator& _alloc)
    : robotName(_alloc)
    , target_value(0.0)
    , order(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robotName_type;
  _robotName_type robotName;

   typedef float _target_value_type;
  _target_value_type target_value;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _order_type;
  _order_type order;





  typedef boost::shared_ptr< ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LiftServiceRequest_

typedef ::hobe_rospy_test::LiftServiceRequest_<std::allocator<void> > LiftServiceRequest;

typedef boost::shared_ptr< ::hobe_rospy_test::LiftServiceRequest > LiftServiceRequestPtr;
typedef boost::shared_ptr< ::hobe_rospy_test::LiftServiceRequest const> LiftServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator1> & lhs, const ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.robotName == rhs.robotName &&
    lhs.target_value == rhs.target_value &&
    lhs.order == rhs.order;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator1> & lhs, const ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hobe_rospy_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6bb648a713d4443a0abf6169f86db5b";
  }

  static const char* value(const ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6bb648a713d4443ULL;
  static const uint64_t static_value2 = 0xa0abf6169f86db5bULL;
};

template<class ContainerAllocator>
struct DataType< ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hobe_rospy_test/LiftServiceRequest";
  }

  static const char* value(const ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robotName\n"
"float32 target_value\n"
"string order\n"
;
  }

  static const char* value(const ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robotName);
      stream.next(m.target_value);
      stream.next(m.order);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LiftServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hobe_rospy_test::LiftServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "robotName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robotName);
    s << indent << "target_value: ";
    Printer<float>::stream(s, indent + "  ", v.target_value);
    s << indent << "order: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.order);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HOBE_ROSPY_TEST_MESSAGE_LIFTSERVICEREQUEST_H
