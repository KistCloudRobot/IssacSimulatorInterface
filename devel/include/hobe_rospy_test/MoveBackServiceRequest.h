// Generated by gencpp from file hobe_rospy_test/MoveBackServiceRequest.msg
// DO NOT EDIT!


#ifndef HOBE_ROSPY_TEST_MESSAGE_MOVEBACKSERVICEREQUEST_H
#define HOBE_ROSPY_TEST_MESSAGE_MOVEBACKSERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hobe_rospy_test
{
template <class ContainerAllocator>
struct MoveBackServiceRequest_
{
  typedef MoveBackServiceRequest_<ContainerAllocator> Type;

  MoveBackServiceRequest_()
    : robotName()
    , node_num()  {
    }
  MoveBackServiceRequest_(const ContainerAllocator& _alloc)
    : robotName(_alloc)
    , node_num(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robotName_type;
  _robotName_type robotName;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _node_num_type;
  _node_num_type node_num;





  typedef boost::shared_ptr< ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveBackServiceRequest_

typedef ::hobe_rospy_test::MoveBackServiceRequest_<std::allocator<void> > MoveBackServiceRequest;

typedef boost::shared_ptr< ::hobe_rospy_test::MoveBackServiceRequest > MoveBackServiceRequestPtr;
typedef boost::shared_ptr< ::hobe_rospy_test::MoveBackServiceRequest const> MoveBackServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator1> & lhs, const ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.robotName == rhs.robotName &&
    lhs.node_num == rhs.node_num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator1> & lhs, const ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hobe_rospy_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fcba4a221d250c2bc8b7b6802b446de3";
  }

  static const char* value(const ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfcba4a221d250c2bULL;
  static const uint64_t static_value2 = 0xc8b7b6802b446de3ULL;
};

template<class ContainerAllocator>
struct DataType< ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hobe_rospy_test/MoveBackServiceRequest";
  }

  static const char* value(const ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robotName\n"
"string node_num\n"
;
  }

  static const char* value(const ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robotName);
      stream.next(m.node_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveBackServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hobe_rospy_test::MoveBackServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "robotName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robotName);
    s << indent << "node_num: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.node_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HOBE_ROSPY_TEST_MESSAGE_MOVEBACKSERVICEREQUEST_H
