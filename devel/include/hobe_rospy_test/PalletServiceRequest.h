// Generated by gencpp from file hobe_rospy_test/PalletServiceRequest.msg
// DO NOT EDIT!


#ifndef HOBE_ROSPY_TEST_MESSAGE_PALLETSERVICEREQUEST_H
#define HOBE_ROSPY_TEST_MESSAGE_PALLETSERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hobe_rospy_test
{
template <class ContainerAllocator>
struct PalletServiceRequest_
{
  typedef PalletServiceRequest_<ContainerAllocator> Type;

  PalletServiceRequest_()
    : action()
    , palletizer()
    , robot()
    , node()  {
    }
  PalletServiceRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , palletizer(_alloc)
    , robot(_alloc)
    , node(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _palletizer_type;
  _palletizer_type palletizer;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_type;
  _robot_type robot;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _node_type;
  _node_type node;





  typedef boost::shared_ptr< ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PalletServiceRequest_

typedef ::hobe_rospy_test::PalletServiceRequest_<std::allocator<void> > PalletServiceRequest;

typedef boost::shared_ptr< ::hobe_rospy_test::PalletServiceRequest > PalletServiceRequestPtr;
typedef boost::shared_ptr< ::hobe_rospy_test::PalletServiceRequest const> PalletServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator1> & lhs, const ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.palletizer == rhs.palletizer &&
    lhs.robot == rhs.robot &&
    lhs.node == rhs.node;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator1> & lhs, const ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hobe_rospy_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb149d902942e5a0c72cd969c7f98933";
  }

  static const char* value(const ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb149d902942e5a0ULL;
  static const uint64_t static_value2 = 0xc72cd969c7f98933ULL;
};

template<class ContainerAllocator>
struct DataType< ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hobe_rospy_test/PalletServiceRequest";
  }

  static const char* value(const ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action\n"
"string palletizer\n"
"string robot\n"
"string node\n"
;
  }

  static const char* value(const ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.palletizer);
      stream.next(m.robot);
      stream.next(m.node);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PalletServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hobe_rospy_test::PalletServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action);
    s << indent << "palletizer: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.palletizer);
    s << indent << "robot: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot);
    s << indent << "node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.node);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HOBE_ROSPY_TEST_MESSAGE_PALLETSERVICEREQUEST_H
